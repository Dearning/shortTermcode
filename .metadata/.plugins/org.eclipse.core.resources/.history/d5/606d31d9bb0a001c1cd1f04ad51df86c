package cn.edu.zucc.personplan.comtrol.example;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import cn.edu.zucc.personplan.itf.IStepManager;
import cn.edu.zucc.personplan.model.BeanPlan;
import cn.edu.zucc.personplan.model.BeanStep;
import cn.edu.zucc.personplan.model.BeanUser;
import cn.edu.zucc.personplan.util.BaseException;
import cn.edu.zucc.personplan.util.BusinessException;
import cn.edu.zucc.personplan.util.DBUtil;
import cn.edu.zucc.personplan.util.DbException;

public class ExampleStepManager implements IStepManager {

	@Override
	public void add(BeanPlan plan, String name, String planstartdate,
			String planfinishdate) throws BaseException {
		System.out.println("判断计划名字");
	    if(name==null || "".equals(name)) throw new BusinessException("步骤名称必须提供");
		//首先需要查找是否有同名的步骤,由于不能重名,如果已经存在,则报错,如果不存在,则去找到当前最大步骤序号,添加行记录,name是步骤名称
		Connection connection =null;
		try {
			int maxStepIndex =0;
			String currentUserid = BeanUser.currentLoginUser.getUser_id();
			connection=DBUtil.getConnection();
			String userid = plan.getUser_idString();
			int planid = plan.getPlan_id();
			//这里beanPlan的数据类型没有统一,写起来比较难受,吸取教训
			//
			String sqlString = "select * from tbl_step,tbl_plan "
					+ " where tbl_step.plan_id=tbl_plan.plan_id "
					+ " and user_id=? and step_name=?";
			java.sql.PreparedStatement pStatement = connection.prepareStatement(sqlString);

			pStatement.setString(1, userid);//此处没有beanUser但是currentUser静态变量存储量当前用户
			pStatement.setString(2, name);
			java.sql.ResultSet rs = pStatement.executeQuery();
			if(rs.next()) {
				pStatement.close();
				rs.close();
				throw new BusinessException("同名计划已经存在");
			}
			pStatement.close();
			rs.close();
			//找同一plan里最大步骤序号
			sqlString = "select max(step_order) from tbl_step where plan_id = ? ";
			pStatement = connection.prepareStatement(sqlString);
			pStatement.setInt(1, planid);
			rs = pStatement.executeQuery();
			
			if(rs.next()) {
				maxStepIndex = rs.getInt(1)+1;
			} else {
				maxStepIndex = 1;
				//因为找不到记录表示没有记录那么当前为第一条记录,throw new BusinessException("没找到最大序号,可能是不存在记录");
			}
			pStatement.close();
			rs.close();
			
			sqlString = " insert into tbl_plan(plan_id,step_order,"
					+ "step_name,plan_begin_time,plan_end_time,real_begin_time) "
					+ " values(?,?,?,?,0,0,0) ";
			pStatement = connection.prepareStatement(sqlString);
			pStatement.setString(1, currentUserid);
			pStatement.setInt(2, maxStepIndex);
			pStatement.setString(3, name);
			java.sql.Timestamp timestamp = new java.sql.Timestamp(System.currentTimeMillis());
			pStatement.setTimestamp(4, timestamp);
			pStatement.execute();
			BeanPlan beanPlan=new BeanPlan();
			beanPlan.setPlan_nameString(name);
			beanPlan.setPlan_order(max=Index);
			beanPlan.setUser_idString(currentUserid);
			beanPlan.setCreate_timeDate(timestamp);
			beanPlan.setStep_count(0);
			beanPlan.setStart_step_count(0);
			beanPlan.setFinished_step_count(0);
			sqlString = "select max(plan_id) from tbl_plan where user_id = ?";
			pStatement = connection.prepareStatement(sqlString);
			pStatement.setString(1, currentUserid);
			rs = pStatement.executeQuery();
			if(rs.next()) {
				beanPlan.setPlan_id(rs.getInt(1));
			}
			
			return beanPlan;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new DbException(e);
		}finally {
			if(connection!=null) {
				try {
					connection.close();
				} catch (Exception e2) {
					// TODO: handle exception
					e2.printStackTrace();
				}
			}
		}
		
	}

	@Override
	public List<BeanStep> loadSteps(BeanPlan plan) throws BaseException {
		List<BeanStep> result=new ArrayList<BeanStep>();
		BeanStep p=new BeanStep();
		result.add(p);
		return result;
	}

	@Override
	public void deleteStep(BeanStep step) throws BaseException {
		// TODO Auto-generated method stub
		
		
	}

	@Override
	public void startStep(BeanStep step) throws BaseException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void finishStep(BeanStep step) throws BaseException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void moveUp(BeanStep step) throws BaseException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void moveDown(BeanStep step) throws BaseException {
		// TODO Auto-generated method stub
		
	}

}
